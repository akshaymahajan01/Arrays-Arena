class Solution {
public:
    int trap(vector<int>& height) {

        int i=0;
        int j=height.size()-1;

        int left_max = height[i];
        int right_max = height[j];

        int sum=0;

        while(i<j){
            if(left_max <= right_max){
                sum+= left_max - height[i];
                i++;
                left_max = max(left_max , height[i]);

            }else{

                sum+= right_max - height[j];
                j--;
                right_max = max(right_max , height[j]);

            }
        }

        return sum;
        
    }
};

time complexity o(n) -- space complexity o(1)  by two pointer approch 


<<<--------------------------------------------------------------------------------------------------------------------->>>


another approch by left and rigth array 

time complexity o(n) --- space complexity o(2n)

class Solution {
public:
    int trap(vector<int>& height) {

        int n = height.size();

        vector<int> left(n);
        vector<int> right(n);

        int sum=0;
        
        left[0] = height[0];
        for(int i=1;i<n;i++)
        {
            left[i] = max(left[i-1] , height[i]);
        }

        right[n-1] = height[n-1];
        for(int i=n-2;i>=0;i--)
        {
            right[i] = max(right[i+1] , height[i]);
        }


        for(int i=0;i<n;i++)
        {
            sum+=min(left[i] , right[i]) - height[i];
        }

        return sum;
        
    }
};


